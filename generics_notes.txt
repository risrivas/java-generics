# 01 module is better to go with pdf and source code demo - GenericBuffer class is good
# 02 module is only about collections - very basic

# 03 module is most important - inheritance
- if we want to call methods on generic types - like T.compareTo() or T.trade() - then use type bounds - extends and super
- in a comparator or comparable, always left arg is compared to right arg

# 04 module is generics on methods
- only scoped on that method only
- T is placed before return type

- example:
public static <T> T min(List<T> values, Comparator<T> comparator) {}

# 05 - wildcards
- example:
List<? extends Cls>
List<? super Cls>
List<?>

- when we want to save all the subclasses of a parent class as a list - can use upperbound - List<? extends Person>
- below 2 lines of code are equivalent:
public void saveAll(final List<? extends Person> people)
public <T extends Person> void saveAll(final List<T> people)

- use ? for methods arguments
- use T for generic class as T will be needed to declare fields / return value from getters
